/**
 * Standalone Vercel API Route for Senior Data Analyst AI
 * This version includes the core analysis logic directly
 */

// Enable CORS for all origins
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

// Simplified analysis function for Vercel
function analyzeDatasetSimple(data) {
  const { headers, sampleData } = data;
  
  // Basic data type detection
  const columns = headers.map((header, index) => {
    const values = sampleData.map(row => row[index]).filter(v => v != null);
    const uniqueValues = new Set(values).size;
    
    let type = 'text';
    if (values.every(v => !isNaN(parseFloat(v)) && isFinite(v))) {
      type = 'numerical';
    } else if (uniqueValues <= 10) {
      type = 'categorical';
    } else if (values.some(v => /\d{4}-\d{2}-\d{2}/.test(v))) {
      type = 'datetime';
    }
    
    return { name: header, type, uniqueValues };
  });
  
  // Generate basic charts
  const charts = [];
  const numericalCols = columns.filter(c => c.type === 'numerical');
  const categoricalCols = columns.filter(c => c.type === 'categorical');
  
  // Bar charts
  categoricalCols.forEach(catCol => {
    numericalCols.forEach(numCol => {
      charts.push({
        title: `${numCol.name} by ${catCol.name}`,
        type: 'bar',
        xAxis: catCol.name,
        yAxis: numCol.name
      });
    });
  });
  
  // Scatter plots
  for (let i = 0; i < numericalCols.length; i++) {
    for (let j = i + 1; j < numericalCols.length; j++) {
      charts.push({
        title: `${numericalCols[j].name} vs ${numericalCols[i].name}`,
        type: 'scatter',
        xAxis: numericalCols[i].name,
        yAxis: numericalCols[j].name
      });
    }
  }
  
  // Generate basic report
  const report = `# Data Analysis Report

## Executive Summary
This dataset contains ${headers.length} columns with ${sampleData.length} sample rows.

## Column Analysis
${columns.map(col => `- **${col.name}**: ${col.type} (${col.uniqueValues} unique values)`).join('\n')}

## Key Insights
- **Numerical Columns**: ${numericalCols.length}
- **Categorical Columns**: ${categoricalCols.length}
- **Chart Recommendations**: ${charts.length}

## Recommended Visualizations
${charts.slice(0, 5).map((chart, i) => `${i + 1}. ${chart.title} (${chart.type})`).join('\n')}

## Business Questions
1. What are the key patterns in this dataset?
2. Which columns drive the most value?
3. How can we optimize performance based on this data?
4. What trends should we monitor going forward?

*Analysis generated by Senior Data Analyst AI*`;

  return {
    charts_to_generate: charts.slice(0, 10), // Limit to 10 charts
    full_analysis_report_markdown: report
  };
}

module.exports = async (req, res) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    Object.entries(corsHeaders).forEach(([key, value]) => {
      res.setHeader(key, value);
    });
    return res.status(200).json({});
  }

  // Set CORS headers
  Object.entries(corsHeaders).forEach(([key, value]) => {
    res.setHeader(key, value);
  });

  if (req.method !== 'POST') {
    return res.status(405).json({
      error: 'Method not allowed',
      message: 'Only POST requests are supported'
    });
  }

  try {
    const { headers, sampleData } = req.body;
    
    // Validate input
    if (!headers || !Array.isArray(headers) || headers.length === 0) {
      return res.status(400).json({
        error: 'Invalid input: headers must be a non-empty array'
      });
    }
    
    if (!sampleData || !Array.isArray(sampleData) || sampleData.length === 0) {
      return res.status(400).json({
        error: 'Invalid input: sampleData must be a non-empty array'
      });
    }
    
    const startTime = Date.now();
    
    // Perform simplified analysis
    const result = analyzeDatasetSimple({ headers, sampleData });
    
    const processingTime = Date.now() - startTime;
    
    // Return results with metadata
    res.status(200).json({
      success: true,
      data: result,
      metadata: {
        processingTime,
        chartCount: result.charts_to_generate.length,
        reportLength: result.full_analysis_report_markdown.length,
        columnsAnalyzed: headers.length,
        rowsProcessed: sampleData.length,
        timestamp: new Date().toISOString(),
        version: 'standalone'
      }
    });
    
  } catch (error) {
    console.error('Analysis error:', error);
    res.status(500).json({
      success: false,
      error: 'Analysis failed',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
};